package myDatePakcage;

public class MyDate {
	
	private int year;
	private int month;
	private int day;
	
	String strMonths[] = {"Jan","Feb","Mar","Apr","May","Jun",
		"Jul","Aug","Sep","Oct","Nov","Dec"};
	
	String strDays[] = {"Sunday","Monday","Tuesday","Wednesday",
		"Thursday","Friday","Saturday"};
	
	int dayInMonths[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31,30};
	
	/*The MyDate class has the following public static methods:
isValidDate(int year, int month, int day): returns true if the given year, month, 
and day constitute a valid date. Assume that year is between 1 and 9999, month is between 1 (Jan) to 12 (Dec)
 and day shall be between 1 and 28|29|30|31 depending on the month and whether it is a leap year on Feb.
getDayOfWeek(int year, int month, int day): returns the day of the week, where 0 for Sun, 1 for Mon, ..., 
6 for Sat, for the given date. Assume that the date is valid. Read the earlier exercise on how to determine the day of the week 
(or Wiki "Determination of the day of the week").
	 */
	
	public static boolean isLeapYear(int year){
		if(((year % 400) == 0) ||(((year % 4 == 0) &&(year % 100) != 0))){
			return true;
		}
		else{
			return false;
		}
	}
	
	public static boolean isValidDate(int year, int month, int day){
		if (((1 <= year) && ( year <= 9999))
			&& ((1 <= month) && (month <= 12))
			&& ((1 <= day) && (day <= (int)(dayInMonths[month - 1])))){	
			
			if((this.isLeapYear(int year)) && ((month == 2) && (day <= 28))){
				return true;
			}
			else{
				return false;
			}
				return true;
		}
		else{
			return false;
		}
	}
	
	getDayOfWeek(int year, int month, int day)
	
	
	
	
	

}
